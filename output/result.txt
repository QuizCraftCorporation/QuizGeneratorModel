What are the two main functions of operating systems?
providing abstractions to user programs and managing the computer's resources|creating, writing, reading, and deleting files|dealing with vague generalities and specific systems|issuing system calls and using assembly code
[0]


What is the primary focus of the interface between user programs and the operating system?
dealing with the abstractions|managing the computer's resources|making system calls from C programs|using assembly code
[0]


Why is it important to examine the interface between user programs and the operating system?
to understand what operating systems really do|to learn about the mechanics of issuing a system call|to make system calls from C programs|to manage the computer's resources
[0]


What approach has been chosen to understand what operating systems really do?
the specific system approach|the vague generalities approach|the assembly code approach|the procedure library approach
[0]


What is the purpose of the procedure library?
to make it possible to make system calls from C programs|to manage the computer's resources|to provide abstractions to user programs|to issue system calls using assembly code
[0]


What is the purpose of a system call?
To transfer control to the operating system|To execute multiple instructions at a time|To read data from a file|To make a special kind of procedure call
[0]


How does a process in user mode request a system service?
By executing a trap instruction|By calling a library procedure|By inspecting the parameters|By returning control to the instruction following the system call
[0]


What are the parameters of a system call?
The file, the buffer, and the number of bytes to read|The file, the buffer, and the error number|The file, the buffer, and the count|The file, the buffer, and the library procedure
[0]


How is a system call invoked from a C program?
By calling a library procedure with the same name as the system call|By executing a trap instruction|By inspecting the parameters|By returning control to the instruction following the system call
[0]


What does the system call 'read' return?
The number of bytes actually read|The number of bytes to read|The error number|The count
[0]


What is the purpose of pushing parameters onto the stack before making a system call?
To pass the parameters to the library procedure|To switch from user mode to kernel mode|To execute a TRAP instruction|To put the system-call number in a register
[0]


Why are the parameters pushed onto the stack in reverse order?
For historical reasons|To make the first parameter appear on top of the stack|To pass the parameters by reference|To pass the parameters by value
[0]


What is the difference between passing a parameter by value and passing it by reference?
Passing by value means passing the contents of the parameter|Passing by reference means passing the address of the parameter|Passing by value means passing the address of the parameter|Passing by reference means passing the contents of the parameter
[0, 1]


What does the library procedure do before executing a TRAP instruction?
Puts the system-call number in a register|Pushes the parameters onto the stack|Switches from user mode to kernel mode|Starts execution at a fixed address within the kernel
[0]


What is the purpose of the TRAP instruction?
To switch from user mode to kernel mode|To execute a procedure-call instruction|To pass the parameters to the library procedure|To start execution at a fixed address within the kernel
[0, 3]


What are the 11 steps involved in making the system call read(fd, buffer, nbytes)?
SPCall|readPush|fdPush|&bufferPush|nbytes5Figure|TRAP instruction|switching to kernel mode|jumping to a fixed location|indexing into a table of jump addresses|dispatching to the correct system-call handler|running the system-call handler
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


What is the purpose of the TRAP instruction in making a system call?
To switch into kernel mode|To give the index into a table of jump addresses|To save the return address on the stack|To jump to an arbitrary address
[0]


How does the TRAP instruction differ from a procedure call instruction?
It changes the mode to kernel mode|It jumps to an arbitrary address|It gives the index into a table of jump addresses|It saves the return address on the stack
[0]


What does the system-call handler do?
Switches into kernel mode|Runs the system-call handler|Returns control to the user-space library procedure|Dispatches to the correct system-call handler
[1]


How does the system-call handler return control to the user program?
By switching into kernel mode|By running the system-call handler|By dispatching to the correct system-call handler|By returning in the usual way procedure calls return
[3]


